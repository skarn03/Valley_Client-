{"version":3,"file":"static/js/84.71f0a37b.chunk.js","mappings":"gJA6DA,IA3DwB,WACpB,IAAAA,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAA0BL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEhBG,GAAqBC,EAAAA,EAAAA,QAAO,IAE5BC,GAAcC,EAAAA,EAAAA,aAAW,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAC,EAC5BC,GAAG,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,UAAA,OAAAZ,EAAAA,EAAAA,KAAAa,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAS4C,OAR/CZ,EAAMO,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAAG,MACTN,EAAIM,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAAG,KACPL,EAAOK,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAAG,CAAC,EAEXtB,GAAa,GACbI,EAAS,MAEHc,EAAgB,IAAIY,gBAC1BzB,EAAmB0B,QAAQC,KAAKd,GAAeO,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAGpBM,MAAMnB,EAAK,CAC9BC,OAAAA,EACAC,KAAAA,EACAC,QAAAA,EACAiB,OAAQhB,EAAcgB,SACvB,KAAD,GALY,OAARf,EAAQM,EAAAU,KAAAV,EAAAE,KAAA,GAOaR,EAASiB,OAAO,KAAD,GAGxC,GAHIhB,EAAYK,EAAAU,KAClB9B,EAAmB0B,QAAU1B,EAAmB0B,QAAQM,QACpD,SAAAC,GAAS,OAAIA,IAAcpB,CAAa,IAGvCC,EAASoB,GAAG,CAADd,EAAAE,KAAA,SAEkB,MADxBxB,EAAQ,IAAIqC,MAAMpB,EAAaqB,SAAW,mBAC1CtB,SAAWC,EACXjB,EAAM,KAAD,GAGK,OAApBH,GAAa,GAAOyB,EAAAiB,OAAA,SACbtB,GAAY,QAGH,MAHGK,EAAAC,KAAA,GAAAD,EAAAkB,GAAAlB,EAAA,SAEnBzB,GAAa,GACbI,EAAQqB,EAAAkB,IAAQlB,EAAAkB,GAAA,yBAAAlB,EAAAmB,OAAA,GAAA/B,EAAA,mBAGvB,gBAAAgC,GAAA,OAAApC,EAAAqC,MAAA,KAAAvB,UAAA,EAtC8B,GAsC5B,IAYH,OANAwB,EAAAA,EAAAA,YAAU,WACN,OAAO,WACH1C,EAAmB0B,QAAQiB,SAAQ,SAAAV,GAAS,OAAIA,EAAUW,OAAO,GACrE,CACJ,GAAG,IAEI,CAAElD,UAAAA,EAAWI,MAAAA,EAAOI,YAAAA,EAAa2C,aAVnB,WACjB9C,EAAS,KACb,EASJ,C,2KC0JA,EA9MoB,SAAHK,GAA2B,IAArB0C,EAAI1C,EAAJ0C,KAAMC,EAAO3C,EAAP2C,QACzBzD,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArC0D,EAAQxD,EAAA,GAAEyD,EAAWzD,EAAA,GAC5BI,GAAwCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA7CsD,EAAYrD,EAAA,GAAEsD,EAAetD,EAAA,GAC9BuD,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GAClBC,GAAiBxD,EAAAA,EAAAA,QAAO,MACtBC,GAAgBwD,EAAAA,EAAAA,KAAhBxD,YACRyD,GAAwCpE,EAAAA,EAAAA,UAAS,IAAGqE,GAAAnE,EAAAA,EAAAA,GAAAkE,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAA4BxE,EAAAA,EAAAA,UAAS,MAAKyE,GAAAvE,EAAAA,EAAAA,GAAAsE,EAAA,GAAnCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,IAOxBtB,EAAAA,EAAAA,YAAU,WACN,IAAMuB,GAASE,EAAAA,EAAAA,IAAGC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,sBAAAA,6BAAYC,0BAU9B,OAPAH,EAAUD,GAGVA,EAAOK,GAAG,kBAAkB,SAAClC,GAEzBa,GAAY,SAACsB,GAAY,SAAAC,QAAAC,EAAAA,EAAAA,GAASF,GAAY,CAAEnC,GAAU,GAC9D,IACO,WACH6B,EAAOS,YACX,CACJ,GAAG,KAEHhC,EAAAA,EAAAA,YAAU,WACN,IAAMiC,EAAe,eAAAC,GAAAvE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAM,EAAA,OAAAR,EAAAA,EAAAA,KAAAa,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEOpB,EACnBkE,4BAAkC,qBAADI,OAAsB1B,EAAK+B,KAC5D,MACA,KACA,CACI,eAAgB,mBAChBC,cAAe,UAAYxB,EAAKyB,QAEtC,KAAD,EACyB,OATpBjE,EAAQM,EAAAU,KASdgC,EAAgBhD,GAAUM,EAAAiB,OAAA,SACnBvB,EAAS+D,KAAG,OAAAzD,EAAAC,KAAA,EAAAD,EAAAkB,GAAAlB,EAAA,SAEnB4D,QAAQC,IAAG7D,EAAAkB,IACX,yBAAAlB,EAAAmB,OAAA,GAAA/B,EAAA,kBAEP,kBAjBoB,OAAAoE,EAAAnC,MAAA,KAAAvB,UAAA,KAmBfgE,EAAU,eAAAC,GAAA9E,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA6E,EAAOC,GAAO,IAAAvE,EAAAwE,EAAA,OAAAhF,EAAAA,EAAAA,KAAAa,MAAA,SAAAoE,GAAA,cAAAA,EAAAlE,KAAAkE,EAAAjE,MAAA,UAAAiE,EAAAlE,KAAA,GAErBgE,EAAQ,CAADE,EAAAjE,KAAA,eAAAiE,EAAAjE,KAAA,EACgBpB,EACnBkE,4BAAkC,gBAADI,OAAiBa,GAClD,MACA,KACA,CACI,eAAgB,mBAChBP,cAAe,UAAYxB,EAAKyB,QAEtC,KAAD,EARKjE,EAAQyE,EAAAzD,KASRwD,EAAoBxE,EAAS0E,KAAI,SAACpD,GAAO,MAAM,CACjDqD,IAAKrD,EAAQyC,IACba,OAAQtD,EAAQsD,OAChBC,KAAMvD,EAAQuD,KACdC,GAAIxD,EAAQyC,IACf,IACD5B,EAAYqC,GAAmB,OAAAC,EAAAjE,KAAA,gBAAAiE,EAAAlE,KAAA,EAAAkE,EAAAjD,GAAAiD,EAAA,SAGnCP,QAAQC,IAAGM,EAAAjD,IACX,yBAAAiD,EAAAhD,OAAA,GAAA6C,EAAA,kBAEP,gBAxBe5C,GAAA,OAAA2C,EAAA1C,MAAA,KAAAvB,UAAA,KA0BhByD,IAAkBkB,MAAK,SAACR,GACpBH,EAAWG,EACf,GACJ,GAAG,CAACvC,EAAM5C,EAAaoD,EAAKyB,SAE5BrC,EAAAA,EAAAA,YAAU,WAcN,OAZIuB,GAAUJ,EAAagB,KACvBZ,EAAO6B,KAAK,WAAYjC,EAAagB,KAIrCZ,GACAA,EAAOK,GAAG,0BAA0B,WAEhCU,QAAQC,IAAI,6BAChB,IAGG,WACChB,GACAA,EAAO8B,IAAI,yBAEnB,CACJ,GAAG,CAAC9B,EAAQJ,IAEZ,IAAMmC,EAAiB,eAAAC,GAAA5F,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2F,IAAA,OAAA5F,EAAAA,EAAAA,KAAAa,MAAA,SAAAgF,GAAA,cAAAA,EAAA9E,KAAA8E,EAAA7E,MAAA,UACM,KAAxB4B,EAAakD,OAAa,CAAAD,EAAA7E,KAAA,SAUnB,OATP0D,QAAQC,IAAInC,GAAMqD,EAAA9E,KAAA,EAEd4C,EAAO6B,KAAK,cAAe,CACvBO,OAAQxC,EAAagB,IACrBzC,QAAS,CACLsD,OAAQpC,EAAKgD,OACbX,KAAMzC,GAEVqD,YAAYzD,EAAK+B,MAClBsB,EAAA7E,KAAA,EACoBpB,EACnBkE,2CACA,OACAoC,KAAKC,UAAU,CACXC,eAAgB7C,EAAagB,IAC7Ba,OAAQpC,EAAKgD,OACbX,KAAMzC,IAEV,CACI,eAAgB,mBAChB4B,cAAe,UAAYxB,EAAKyB,QAEtC,KAAD,EAZaoB,EAAArE,KAkBdqB,EAAgB,IAAIgD,EAAA7E,KAAA,iBAAA6E,EAAA9E,KAAA,GAAA8E,EAAA7D,GAAA6D,EAAA,SAEpBnB,QAAQC,IAAGkB,EAAA7D,IACX,yBAAA6D,EAAA5D,OAAA,GAAA2D,EAAA,mBAGX,kBApCsB,OAAAD,EAAAxD,MAAA,KAAAvB,UAAA,KAoDvB,OAJAwB,EAAAA,EAAAA,YAAU,WACNe,EAAe/B,QAAQiF,UAAYlD,EAAe/B,QAAQkF,YAC9D,GAAG,CAAC5D,IAGAa,IACIgD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAmBG,IAAKnE,EAAKoE,WAAYC,IAAKrE,EAAKsE,QAClEJ,EAAAA,EAAAA,KAAA,UAAQF,UAAU,kBAAiBC,UAC/BC,EAAAA,EAAAA,KAAA,QACIK,QAAS,WACLjE,EAAS,YAAcN,EAAK+B,IAChC,EACAiC,UAAU,iBAAgBC,SAEzBjE,EAAKsE,UAGdJ,EAAAA,EAAAA,KAAA,UAAQF,UAAU,kBAAkBO,QAvB5B,WACpBtE,GACJ,EAqB6EgE,UACzDC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,uBAGrBE,EAAAA,EAAAA,KAAA,UACAH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAoBQ,IAAK7D,EAAesD,SAClD/D,EAASzB,OAAS,GACfyB,EAASwC,KAAI,SAACpD,GAAO,OACjB4E,EAAAA,EAAAA,KAAA,OAEIpB,GAAIxD,EAAQsD,QAAUpC,EAAKgD,OAAS,MAAQ,QAC5CQ,UAAU,oBAAmBC,UAE7BC,EAAAA,EAAAA,KAAA,QAAAD,SAAO3E,EAAQuD,QAJVvD,EAAQwD,GAKX,OAGlBiB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,SACIO,KAAK,OACLC,YAAY,uBACZC,MAAOvE,EACPwE,SAxLE,SAACC,GACvBxE,EAAgBwE,EAAMC,OAAOH,MACjC,EAuLwBI,UArDF,SAACF,GACG,KAAlBA,EAAMG,SACN9B,GAER,KAmDoBgB,EAAAA,EAAAA,KAAA,UAAQF,UAAU,iBAAiBO,QAASrB,EAAkBe,SAAC,iBAQvF,EC3HA,EAlFkB,WACd,IAAAzH,GAA8BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCyI,EAAOvI,EAAA,GAAEwI,EAAUxI,EAAA,GAC1BI,GAAsCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA3CqI,EAAWpI,EAAA,GAAEqI,EAAcrI,EAAA,GAC1BK,GAAgBwD,EAAAA,EAAAA,KAAhBxD,YACFoD,GAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GACxBG,GAAwCpE,EAAAA,EAAAA,UAAS,MAAKqE,GAAAnE,EAAAA,EAAAA,GAAAkE,EAAA,GAA/CwE,EAAYvE,EAAA,GAAEwE,EAAexE,EAAA,IAEpClB,EAAAA,EAAAA,YAAU,WACN,IAAM2F,EAAY,eAAAjI,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAO,EAAA,OAAAT,EAAAA,EAAAA,KAAAa,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEcpB,EACvBkE,0CACA,MACA,KACA,CACI,eAAgB,mBAChBU,cAAe,UAAYxB,EAAKyB,QAEtC,KAAD,EARKhE,EAAYK,EAAAU,KASlBkG,EAAWjH,GAAcK,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAkB,GAAAlB,EAAA,SAEzB4D,QAAQlF,MAAKsB,EAAAkB,IAAQ,yBAAAlB,EAAAmB,OAAA,GAAA/B,EAAA,kBAE5B,kBAfiB,OAAAJ,EAAAqC,MAAA,KAAAvB,UAAA,KAiBlBmH,GACJ,GAAG,CAAC/E,EAAKyB,MAAO7E,IAEhB,IAIMoI,EAAkBP,EAAQ/F,QAAO,SAACuG,GAAM,OAC1CA,EAAOnB,KAAKoB,cAAcC,SAASR,EAAYO,cAAc,IAWjE,OACI3B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,kBAAiBC,SAAC,aAChCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC7BC,EAAAA,EAAAA,KAAA,SACIO,KAAK,OACLC,YAAY,SACZC,MAAOQ,EACPP,SAxBK,SAACC,GAClBO,EAAeP,EAAMC,OAAOH,MAChC,EAuBgBX,UAAU,oBAGlBE,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yBAAwBC,SACjCuB,EAAgB9C,KAAI,SAAC+C,GAAM,OACxB1B,EAAAA,EAAAA,MAAA,MAEIjB,GAAG,SACHkB,UAAS,yBAAAtC,OAA2B+D,EAAOG,OAAS,mBAAqB,qBACzEC,MAAOJ,EAAOG,OAAS,SAAW,UAClCrB,QAAS,WA1BzBe,EA0B+CG,EAAO,EAACxB,SAAA,EAEvCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0BAAyBC,UACpCC,EAAAA,EAAAA,KAAA,OAAKC,IAAKsB,EAAOrB,WAAYC,IAAKoB,EAAOnB,UAE7CP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EAClCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAuBC,SAAEwB,EAAOnB,QAC/CJ,EAAAA,EAAAA,KAAA,OAAKpB,GAAG,SAASkB,UAAU,0BAAyBC,SAAEwB,EAAOG,OAAS,SAAW,iBAXhFH,EAAO3C,GAaX,MAGZuC,IACGnB,EAAAA,EAAAA,KAAC4B,EAAW,CAAC9F,KAAMqF,EAAcpF,QApCjB,WACxBqF,EAAgB,KACpB,MAsCJ,C","sources":["Hooks/useFetch.js","Mini-Chat/MiniChatBox.js","Messenger/Messenger.js"],"sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\r\n\r\nexport const useFetch = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const activeHttpRequests = useRef([]);\r\n\r\n    const sendRequest = useCallback(async (\r\n        url,\r\n        method = 'GET',\r\n        body = null,\r\n        headers = {}\r\n    ) => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        const httpAbortCtrl = new AbortController();\r\n        activeHttpRequests.current.push(httpAbortCtrl);\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                method,\r\n                body,\r\n                headers,\r\n                signal: httpAbortCtrl.signal\r\n            });\r\n\r\n            const responseData = await response.json();\r\n            activeHttpRequests.current = activeHttpRequests.current.filter(\r\n                abortCtrl => abortCtrl !== httpAbortCtrl\r\n            );\r\n\r\n            if (!response.ok) {\r\n                const error = new Error(responseData.message || 'Request failed');\r\n                error.response = responseData;\r\n                throw error;\r\n            }\r\n\r\n            setIsLoading(false);\r\n            return responseData;\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n            setError(error);\r\n            throw error;\r\n        }\r\n    }, []);\r\n\r\n    const onCloseError = () => {\r\n        setError(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\r\n        };\r\n    }, []);\r\n\r\n    return { isLoading, error, sendRequest, onCloseError };\r\n};\r\n\r\nexport default useFetch;\r\n","import React, { useState, useContext, useEffect, useRef } from 'react';\r\nimport './MiniChatBox.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { AuthContext } from '../models/AuthContext';\r\nimport useFetch from '../Hooks/useFetch';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst MiniChatBox = ({ user, onClose }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [inputMessage, setInputMessage] = useState('');\r\n    const navigate = useNavigate();\r\n    const auth = useContext(AuthContext);\r\n    const chatContentRef = useRef(null);\r\n    const { sendRequest } = useFetch();\r\n    const [conversation, setConversation] = useState([]);\r\n    const [socket, setSocket] = useState(null);\r\n    const handleInputChange = (event) => {\r\n        setInputMessage(event.target.value);\r\n    };\r\n    \r\n\r\n\r\n    useEffect(() => {\r\n        const socket = io(process.env.REACT_APP_BACKEND_SOCKET);\r\n\r\n        // Save the socket instance in state\r\n        setSocket(socket);\r\n\r\n        // Event handler for receiving messages\r\n        socket.on('receiveMessage', (message) => {\r\n            // Update the messages state with the received message\r\n            setMessages((prevMessages) => [...prevMessages, message]);\r\n        });\r\n        return () => {\r\n            socket.disconnect();\r\n        };\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const getConversation = async () => {\r\n            try {\r\n                const response = await sendRequest(\r\n                    process.env.REACT_APP_BACKEND_URL+`/conversation/get/${user._id}`,\r\n                    'GET',\r\n                    null,\r\n                    {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: 'Bearer ' + auth.token\r\n                    }\r\n                );\r\n                setConversation(response);\r\n                return response._id; // Return the conversation ID\r\n            } catch (error) {\r\n                console.log(error);\r\n                // Handle error (e.g., display an error message)\r\n            }\r\n        };\r\n\r\n        const getMessage = async (convoID) => {\r\n            try {\r\n                if (convoID) {\r\n                    const response = await sendRequest(\r\n                        process.env.REACT_APP_BACKEND_URL+`/message/get/${convoID}`,\r\n                        'GET',\r\n                        null,\r\n                        {\r\n                            'Content-Type': 'application/json',\r\n                            Authorization: 'Bearer ' + auth.token\r\n                        }\r\n                    );\r\n                    const extractedMessages = response.map((message) => ({\r\n                        key: message._id,\r\n                        sender: message.sender,\r\n                        text: message.text,\r\n                        id: message._id,\r\n                    }));\r\n                    setMessages(extractedMessages);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                // Handle error (e.g., display an error message)\r\n            }\r\n        };\r\n\r\n        getConversation().then((convoID) => {\r\n            getMessage(convoID);\r\n        });\r\n    }, [user, sendRequest, auth.token]);\r\n\r\n    useEffect(() => {\r\n        // Emit the joinRoom event when the socket is defined\r\n        if (socket && conversation._id) {\r\n            socket.emit('joinRoom', conversation._id);\r\n        }\r\n\r\n        // Listen for the 'newMessageNotification' event from the server\r\n        if (socket) {\r\n            socket.on('newMessageNotification', () => {\r\n                // Display a toast notification to the user\r\n                console.log(\"has sent you a new message\") ;\r\n            });\r\n        }\r\n        // Cleanup the socket event listener\r\n        return () => {\r\n            if (socket) {\r\n                socket.off('newMessageNotification');\r\n            }\r\n        };\r\n    }, [socket, conversation]);\r\n\r\n    const handleSendMessage = async () => {\r\n        if (inputMessage.trim() !== '') {\r\n            console.log(user);\r\n            try {\r\n                socket.emit('sendMessage', {\r\n                    roomID: conversation._id,\r\n                    message: {\r\n                        sender: auth.userID,\r\n                        text: inputMessage\r\n                    },\r\n                    recipientID:user._id,\r\n                });\r\n                const response = await sendRequest(\r\n                    process.env.REACT_APP_BACKEND_URL+'/message/create',\r\n                    'POST',\r\n                    JSON.stringify({\r\n                        conversationID: conversation._id,\r\n                        sender: auth.userID,\r\n                        text: inputMessage\r\n                    }),\r\n                    {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: 'Bearer ' + auth.token\r\n                    }\r\n                );\r\n\r\n                // Emit the sendMessage event to the server\r\n           \r\n\r\n                // Clear the input message\r\n                setInputMessage('');\r\n            } catch (error) {\r\n                console.log(error);\r\n                // Handle error (e.g., display an error message)\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleKeyDown = (event) => {\r\n        if (event.keyCode === 13) {\r\n            handleSendMessage();\r\n        }\r\n    };\r\n\r\n    const handleCloseChat = () => {\r\n        onClose();\r\n    };\r\n\r\n    useEffect(() => {\r\n        chatContentRef.current.scrollTop = chatContentRef.current.scrollHeight;\r\n    }, [messages]);\r\n\r\n    return (\r\n        conversation && (\r\n            <div className=\"mini-chat-box\">\r\n                <div className=\"mini-chat-header\">\r\n                    <img className=\"mini-chat-avatar\" src={user.profilePic} alt={user.name} />\r\n                    <button className=\"profile-clicker\">\r\n                        <span\r\n                            onClick={() => {\r\n                                navigate('/profile/' + user._id);\r\n                            }}\r\n                            className=\"mini-chat-name\"\r\n                        >\r\n                            {user.name}\r\n                        </span>\r\n                    </button>\r\n                    <button className=\"mini-chat-close\" onClick={handleCloseChat}>\r\n                        <i className=\"fas fa-times\"></i>\r\n                    </button>\r\n                </div>\r\n                <hr />\r\n                <div className=\"headinput\">\r\n                    <div className=\"mini-chat-content\" ref={chatContentRef}>\r\n                        {messages.length > 0 &&\r\n                            messages.map((message) => (\r\n                                <div\r\n                                    key={message.id}\r\n                                    id={message.sender == auth.userID ? 'you' : 'other'}\r\n                                    className=\"mini-chat-message\"\r\n                                >\r\n                                    <span>{message.text}</span>\r\n                                </div>\r\n                            ))}\r\n                    </div>\r\n                    <div className=\"mini-chat-input\">\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Type your message...\"\r\n                            value={inputMessage}\r\n                            onChange={handleInputChange}\r\n                            onKeyDown={handleKeyDown}\r\n                        />\r\n                        <button className=\"mini-chat-send\" onClick={handleSendMessage}>\r\n                            Send\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    );\r\n};\r\n\r\nexport default MiniChatBox;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport './Messenger.css';\r\nimport useFetch from '../Hooks/useFetch';\r\nimport { AuthContext } from '../models/AuthContext';\r\nimport MiniChatBox from '../Mini-Chat/MiniChatBox';\r\n\r\nconst Messenger = () => {\r\n    const [friends, setFriends] = useState([]);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const { sendRequest } = useFetch();\r\n    const auth = useContext(AuthContext);\r\n    const [selectedUser, setSelectedUser] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchFriends = async () => {\r\n            try {\r\n                const responseData = await sendRequest(\r\n                    process.env.REACT_APP_BACKEND_URL+'/users/friends',\r\n                    'GET',\r\n                    null,\r\n                    {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: 'Bearer ' + auth.token,\r\n                    }\r\n                );\r\n                setFriends(responseData);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n\r\n        fetchFriends();\r\n    }, [auth.token, sendRequest]);\r\n\r\n    const handleSearch = (event) => {\r\n        setSearchQuery(event.target.value);\r\n    };\r\n\r\n    const filteredFriends = friends.filter((friend) =>\r\n        friend.name.toLowerCase().includes(searchQuery.toLowerCase())\r\n    );\r\n\r\n    const handleUserClick = (user) => {\r\n        setSelectedUser(user);\r\n    };\r\n\r\n    const handleCloseMiniChat = () => {\r\n        setSelectedUser(null);\r\n    };\r\n\r\n    return (\r\n        <div className=\"messenger-container\">\r\n            <h2 className=\"messenger-title\">Friends</h2>\r\n            <div className=\"search-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search\"\r\n                    value={searchQuery}\r\n                    onChange={handleSearch}\r\n                    className=\"search-input\"\r\n                />\r\n            </div>\r\n            <ul className=\"messenger-friends-list\">\r\n                {filteredFriends.map((friend) => (\r\n                    <li\r\n                        key={friend.id}\r\n                        id=\"lister\"\r\n                        className={`messenger-friend-item ${friend.online ? 'messenger-online' : 'messenger-offline'}`}\r\n                        title={friend.online ? 'Online' : 'Offline'}\r\n                        onClick={() => handleUserClick(friend)}\r\n                    >\r\n                        <div className=\"messenger-friend-avatar\">\r\n                            <img src={friend.profilePic} alt={friend.name} />\r\n                        </div>\r\n                        <div className=\"messenger-friend-info\">\r\n                            <div className=\"messenger-friend-name\">{friend.name}</div>\r\n                            <div id=\"status\" className=\"messenger-friend-status\">{friend.online ? 'Online' : 'Offline'}</div>\r\n                        </div>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {selectedUser && (\r\n                <MiniChatBox user={selectedUser} onClose={handleCloseMiniChat} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Messenger;\r\n"],"names":["_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","error","setError","activeHttpRequests","useRef","sendRequest","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","httpAbortCtrl","response","responseData","_error","_args","arguments","wrap","_context","prev","next","length","undefined","AbortController","current","push","fetch","signal","sent","json","filter","abortCtrl","ok","Error","message","abrupt","t0","stop","_x","apply","useEffect","forEach","abort","onCloseError","user","onClose","messages","setMessages","inputMessage","setInputMessage","navigate","useNavigate","auth","useContext","AuthContext","chatContentRef","useFetch","_useState5","_useState6","conversation","setConversation","_useState7","_useState8","socket","setSocket","io","process","REACT_APP_BACKEND_SOCKET","on","prevMessages","concat","_toConsumableArray","disconnect","getConversation","_ref2","_id","Authorization","token","console","log","getMessage","_ref3","_callee2","convoID","extractedMessages","_context2","map","key","sender","text","id","then","emit","off","handleSendMessage","_ref4","_callee3","_context3","trim","roomID","userID","recipientID","JSON","stringify","conversationID","scrollTop","scrollHeight","_jsxs","className","children","_jsx","src","profilePic","alt","name","onClick","ref","type","placeholder","value","onChange","event","target","onKeyDown","keyCode","friends","setFriends","searchQuery","setSearchQuery","selectedUser","setSelectedUser","fetchFriends","filteredFriends","friend","toLowerCase","includes","online","title","MiniChatBox"],"sourceRoot":""}